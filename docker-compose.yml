version: '2'

volumes:
  database:

services:
  nginx:
    build:
      context: .
      dockerfile: './docker/nginx/Dockerfile-nginx'
    container_name: ${PROJECT_NAME}_nginx
    volumes:
      - ./docker/nginx/${ENVIRONMENT}.conf:/etc/nginx/conf.d/default.conf
      - ./docker/nginx/htpasswd:/etc/nginx/.htpasswd
      - ./docker/certbot/${ENVIRONMENT}:/etc/letsencrypt
    ports:
      - '8080:8080'
      - '80:80'
      - '443:443'
    environment:
      TZ: 'Asia/Tokyo'
    links:
      - mysql:mysql
      - php:php
    volumes_from:
      - data

  php:
    build:
      context: .
      dockerfile: './docker/php/Dockerfile-php'
    container_name: ${PROJECT_NAME}_php
    volumes_from:
      - data
    working_dir: /var/www/backend
    ports:
      - '9000:9000'
    environment:
      TZ: 'Asia/Tokyo'
    links:
      - mysql:mysql
      - postfix:postfix

  mysql:
    build:
      context: .
      dockerfile: './docker/mysql/Dockerfile-mysql'
    command:
      [
        '--character-set-server=utf8',
        '--collation-server=utf8_unicode_ci',
        '--default-authentication-plugin=mysql_native_password',
      ]
    container_name: ${PROJECT_NAME}_mysql
    ports:
      - '3306:3306'
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      TZ: 'Asia/Tokyo'
    volumes:
      - ./docker/mysql/scripts:/docker-entrypoint-initdb.d
      - database:/var/lib/mysql

  postfix:
    build:
      context: .
      dockerfile: './docker/postfix/Dockerfile-postfix'
    container_name: ${PROJECT_NAME}_postfix
    ports:
      - '25:25'
    environment:
      - DEBUG=1
      - MAIL_NAME=${MAIL_NAME}
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - DOCKER_IP=${DOCKER_IP}

  cron:
    build:
      context: .
      dockerfile: './docker/cron/Dockerfile-cron'
    container_name: ${PROJECT_NAME}_cron
    volumes_from:
      - data
    working_dir: /var/www/backend
    environment:
      TZ: 'Asia/Tokyo'
    links:
      - mysql:mysql
      - postfix:postfix

  fixer:
    build:
      context: .
      dockerfile: './docker/fixer/Dockerfile-fixer'
    container_name: ${PROJECT_NAME}_fixer
    volumes_from:
      - data
    working_dir: /var/www/backend

  data:
    image: tianon/true
    container_name: ${PROJECT_NAME}_data
    volumes:
      - ./sites/backend:/var/www/backend
      - ./sites/frontend:/var/www/frontend
    environment:
      TZ: 'Asia/Tokyo'
    tty: true
